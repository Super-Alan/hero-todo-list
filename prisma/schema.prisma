// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js 所需的模型
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String? // 用于邮箱密码登录
  role          Role      @default(USER) // 用户角色
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // 关联
  accounts Account[]
  sessions Session[]
  tasks    Task[]
  tags     Tag[]
  comments Comment[]

  // 微信用户绑定
  wechatUsers WechatUser[]
  wechatTaskLogs WechatTaskLog[]

  // 用户设置
  timezone         String   @default("UTC")
  dateFormat       String   @default("yyyy-MM-dd")
  timeFormat       String   @default("HH:mm")
  weekStartsOn     Int      @default(0) // 0 = Sunday, 1 = Monday

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}





// 微信公众号用户绑定
model WechatUser {
  id        String   @id @default(cuid())
  openid    String   @unique // 微信用户唯一标识
  unionid   String?  // 微信开放平台统一标识
  nickname  String?  // 微信昵称
  avatar    String?  // 微信头像URL
  
  // 用户绑定状态
  isBindUser Boolean @default(false) // 是否已绑定系统用户
  bindToken  String? // 绑定验证令牌
  bindExpires DateTime? // 绑定令牌过期时间
  
  // 关联系统用户
  userId String?
  user   User?  @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // 使用统计
  taskCount    Int @default(0) // 创建的任务数量
  lastActiveAt DateTime @default(now()) // 最后活跃时间
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 消息记录
  messages WechatMessage[]
  taskLogs WechatTaskLog[]

  @@map("wechat_users")
}

// 微信消息记录
model WechatMessage {
  id        String   @id @default(cuid())
  msgId     String?  // 微信消息ID
  msgType   String   // 消息类型: text, image, voice, etc.
  content   String   // 消息内容
  
  // 处理状态
  status    WechatMessageStatus @default(PENDING) // 处理状态
  response  String? // 回复内容
  errorMsg  String? // 错误信息
  
  // 任务创建结果
  taskId    String? // 创建的任务ID
  task      Task?   @relation(fields: [taskId], references: [id], onDelete: SetNull)
  
  // 关联微信用户
  wechatUserId String
  wechatUser   WechatUser @relation(fields: [wechatUserId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("wechat_messages")
}

// 微信任务创建记录
model WechatTaskLog {
  id         String   @id @default(cuid())
  originalMsg String  // 原始消息内容
  parsedData String  // 解析后的任务数据（JSON格式）
  
  // 创建结果
  success    Boolean @default(false)
  taskId     String? // 创建的任务ID
  task       Task?   @relation(fields: [taskId], references: [id], onDelete: SetNull)
  errorMsg   String? // 错误信息
  
  // 关联用户
  userId       String
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
  wechatUserId String
  wechatUser   WechatUser @relation(fields: [wechatUserId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())

  @@map("wechat_task_logs")
}

// 任务模型
model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  isCompleted Boolean   @default(false)
  priority    Priority  @default(MEDIUM)
  status      TaskStatus @default(TODO)
  
  // 时间相关
  dueDate     DateTime?
  dueTime     DateTime?
  reminderAt  DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // 排序和组织
  sortOrder Int @default(0)
  
  // 关联
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  parentTaskId String?
  parentTask   Task?   @relation("SubTasks", fields: [parentTaskId], references: [id], onDelete: Cascade)
  subTasks     Task[]  @relation("SubTasks")

  // 标签关联
  taskTags TaskTag[]
  comments Comment[]

  // 微信关联
  wechatMessages WechatMessage[]
  wechatTaskLogs WechatTaskLog[]

  // 周期性任务
  isRecurring    Boolean @default(false)
  recurringRule  String? // JSON 格式的重复规则
  originalTaskId String? // 指向原始任务的 ID

  @@map("tasks")
}

// 标签模型
model Tag {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("#6b7280") // 默认灰色
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  taskTags TaskTag[]

  @@unique([userId, name])
  @@map("tags")
}

// 任务标签关联表
model TaskTag {
  id     String @id @default(cuid())
  taskId String
  tagId  String

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([taskId, tagId])
  @@map("task_tags")
}

// 评论/备注模型
model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("comments")
}

// AI 模型提供商 (系统级别配置)
model ModelProvider {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  endpoint    String
  apiKey      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 保留userId字段用于数据迁移，将来可能会移除
  userId String?

  @@map("model_providers")
}

// 枚举类型
enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Role {
  USER
  ADMIN
}

enum WechatMessageStatus {
  PENDING    // 待处理
  PROCESSING // 处理中
  SUCCESS    // 处理成功
  FAILED     // 处理失败
}
